{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prati\\\\OneDrive\\\\Desktop\\\\Final\\\\Ship-Management\\\\src\\\\contexts\\\\JobsContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobsContext = /*#__PURE__*/createContext(null);\nexport const JobsProvider = ({\n  children\n}) => {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchJobs = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      // TODO: Implement actual API call\n      // const response = await fetch('/api/jobs');\n      // const data = await response.json();\n      // setJobs(data);\n      console.log(\"Fetch jobs functionality would run here\");\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Failed to fetch jobs:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getJobById = id => {\n    return jobs.find(job => job.id === id);\n  };\n  const addJob = async jobData => {\n    try {\n      setLoading(true);\n      // TODO: Implement actual API call\n      // await fetch('/api/jobs', { method: 'POST', body: JSON.stringify(jobData) });\n      const newJob = {\n        ...jobData,\n        id: jobs.length > 0 ? Math.max(...jobs.map(j => j.id)) + 1 : 1\n      };\n      setJobs(prev => [...prev, newJob]);\n      return newJob;\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Failed to add job:\", err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateJob = async (id, jobData) => {\n    try {\n      setLoading(true);\n      // TODO: Implement actual API call\n      // await fetch(`/api/jobs/${id}`, { method: 'PUT', body: JSON.stringify(jobData) });\n      setJobs(prev => prev.map(job => job.id === id ? {\n        ...job,\n        ...jobData\n      } : job));\n      return jobData;\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Failed to update job:\", err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteJob = async id => {\n    try {\n      setLoading(true);\n      // TODO: Implement actual API call\n      // await fetch(`/api/jobs/${id}`, { method: 'DELETE' });\n      setJobs(prev => prev.filter(job => job.id !== id));\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Failed to delete job:\", err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const value = {\n    jobs,\n    loading,\n    error,\n    fetchJobs,\n    getJobById,\n    addJob,\n    updateJob,\n    deleteJob\n  };\n  return /*#__PURE__*/_jsxDEV(JobsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(JobsProvider, \"vSIinUUVYoBwpGTtlHOuWYOWot8=\");\n_c = JobsProvider;\nexport const useJobs = () => {\n  _s2();\n  const context = useContext(JobsContext);\n  if (!context) {\n    throw new Error('useJobs must be used within a JobsProvider');\n  }\n  return context;\n};\n_s2(useJobs, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"JobsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","JobsContext","JobsProvider","children","_s","jobs","setJobs","loading","setLoading","error","setError","fetchJobs","console","log","err","message","getJobById","id","find","job","addJob","jobData","newJob","length","Math","max","map","j","prev","updateJob","deleteJob","filter","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useJobs","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/prati/OneDrive/Desktop/Final/Ship-Management/src/contexts/JobsContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\nconst JobsContext = createContext(null);\r\n\r\nexport const JobsProvider = ({ children }) => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchJobs = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      // TODO: Implement actual API call\r\n      // const response = await fetch('/api/jobs');\r\n      // const data = await response.json();\r\n      // setJobs(data);\r\n      console.log(\"Fetch jobs functionality would run here\");\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error(\"Failed to fetch jobs:\", err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getJobById = (id) => {\r\n    return jobs.find(job => job.id === id);\r\n  };\r\n\r\n  const addJob = async (jobData) => {\r\n    try {\r\n      setLoading(true);\r\n      // TODO: Implement actual API call\r\n      // await fetch('/api/jobs', { method: 'POST', body: JSON.stringify(jobData) });\r\n      const newJob = {\r\n        ...jobData,\r\n        id: jobs.length > 0 ? Math.max(...jobs.map(j => j.id)) + 1 : 1\r\n      };\r\n      setJobs(prev => [...prev, newJob]);\r\n      return newJob;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error(\"Failed to add job:\", err);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateJob = async (id, jobData) => {\r\n    try {\r\n      setLoading(true);\r\n      // TODO: Implement actual API call\r\n      // await fetch(`/api/jobs/${id}`, { method: 'PUT', body: JSON.stringify(jobData) });\r\n      setJobs(prev => prev.map(job => \r\n        job.id === id ? { ...job, ...jobData } : job\r\n      ));\r\n      return jobData;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error(\"Failed to update job:\", err);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const deleteJob = async (id) => {\r\n    try {\r\n      setLoading(true);\r\n      // TODO: Implement actual API call\r\n      // await fetch(`/api/jobs/${id}`, { method: 'DELETE' });\r\n      setJobs(prev => prev.filter(job => job.id !== id));\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error(\"Failed to delete job:\", err);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    jobs,\r\n    loading,\r\n    error,\r\n    fetchJobs,\r\n    getJobById,\r\n    addJob,\r\n    updateJob,\r\n    deleteJob\r\n  };\r\n\r\n  return (\r\n    <JobsContext.Provider value={value}>\r\n      {children}\r\n    </JobsContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useJobs = () => {\r\n  const context = useContext(JobsContext);\r\n  if (!context) {\r\n    throw new Error('useJobs must be used within a JobsProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}