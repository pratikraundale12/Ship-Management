{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prati\\\\OneDrive\\\\Desktop\\\\Assignment_ENTNT\\\\src\\\\contexts\\\\JobsContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobsContext = /*#__PURE__*/createContext(null);\nexport const JobsProvider = ({\n  children\n}) => {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchJobs = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      // TODO: Implement fetch jobs logic\n      // const response = await fetchJobsAPI();\n      // setJobs(response.data);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const addJob = async jobData => {\n    try {\n      setLoading(true);\n      setError(null);\n      // TODO: Implement add job logic\n      // const response = await addJobAPI(jobData);\n      // setJobs(prev => [...prev, response.data]);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateJob = async (id, jobData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      // TODO: Implement update job logic\n      // const response = await updateJobAPI(id, jobData);\n      // setJobs(prev => prev.map(job => job.id === id ? response.data : job));\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteJob = async id => {\n    try {\n      setLoading(true);\n      setError(null);\n      // TODO: Implement delete job logic\n      // await deleteJobAPI(id);\n      // setJobs(prev => prev.filter(job => job.id !== id));\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const value = {\n    jobs,\n    loading,\n    error,\n    fetchJobs,\n    addJob,\n    updateJob,\n    deleteJob\n  };\n  return /*#__PURE__*/_jsxDEV(JobsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 10\n  }, this);\n};\n_s(JobsProvider, \"vSIinUUVYoBwpGTtlHOuWYOWot8=\");\n_c = JobsProvider;\nexport const useJobs = () => {\n  _s2();\n  const context = useContext(JobsContext);\n  if (!context) {\n    throw new Error('useJobs must be used within a JobsProvider');\n  }\n  return context;\n};\n_s2(useJobs, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"JobsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","JobsContext","JobsProvider","children","_s","jobs","setJobs","loading","setLoading","error","setError","fetchJobs","err","message","addJob","jobData","updateJob","id","deleteJob","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useJobs","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/prati/OneDrive/Desktop/Assignment_ENTNT/src/contexts/JobsContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\nconst JobsContext = createContext(null);\r\n\r\nexport const JobsProvider = ({ children }) => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchJobs = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      // TODO: Implement fetch jobs logic\r\n      // const response = await fetchJobsAPI();\r\n      // setJobs(response.data);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const addJob = async (jobData) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      // TODO: Implement add job logic\r\n      // const response = await addJobAPI(jobData);\r\n      // setJobs(prev => [...prev, response.data]);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateJob = async (id, jobData) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      // TODO: Implement update job logic\r\n      // const response = await updateJobAPI(id, jobData);\r\n      // setJobs(prev => prev.map(job => job.id === id ? response.data : job));\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const deleteJob = async (id) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      // TODO: Implement delete job logic\r\n      // await deleteJobAPI(id);\r\n      // setJobs(prev => prev.filter(job => job.id !== id));\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    jobs,\r\n    loading,\r\n    error,\r\n    fetchJobs,\r\n    addJob,\r\n    updateJob,\r\n    deleteJob\r\n  };\r\n\r\n  return <JobsContext.Provider value={value}>{children}</JobsContext.Provider>;\r\n};\r\n\r\nexport const useJobs = () => {\r\n  const context = useContext(JobsContext);\r\n  if (!context) {\r\n    throw new Error('useJobs must be used within a JobsProvider');\r\n  }\r\n \r\n  return context;\r\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,WAAW,gBAAGL,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMa,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACFH,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd;MACA;MACA;IACF,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZF,QAAQ,CAACE,GAAG,CAACC,OAAO,CAAC;IACvB,CAAC,SAAS;MACRL,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMM,MAAM,GAAG,MAAOC,OAAO,IAAK;IAChC,IAAI;MACFP,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd;MACA;MACA;IACF,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZF,QAAQ,CAACE,GAAG,CAACC,OAAO,CAAC;IACvB,CAAC,SAAS;MACRL,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMQ,SAAS,GAAG,MAAAA,CAAOC,EAAE,EAAEF,OAAO,KAAK;IACvC,IAAI;MACFP,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd;MACA;MACA;IACF,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZF,QAAQ,CAACE,GAAG,CAACC,OAAO,CAAC;IACvB,CAAC,SAAS;MACRL,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMU,SAAS,GAAG,MAAOD,EAAE,IAAK;IAC9B,IAAI;MACFT,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd;MACA;MACA;IACF,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZF,QAAQ,CAACE,GAAG,CAACC,OAAO,CAAC;IACvB,CAAC,SAAS;MACRL,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMW,KAAK,GAAG;IACZd,IAAI;IACJE,OAAO;IACPE,KAAK;IACLE,SAAS;IACTG,MAAM;IACNE,SAAS;IACTE;EACF,CAAC;EAED,oBAAOlB,OAAA,CAACC,WAAW,CAACmB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAhB,QAAA,EAAEA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;AAACpB,EAAA,CAxEWF,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AA0EzB,OAAO,MAAMwB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAG/B,UAAU,CAACI,WAAW,CAAC;EACvC,IAAI,CAAC2B,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EAEA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CAPWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}