{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prati\\\\OneDrive\\\\Desktop\\\\Assignment_ENTNT\\\\src\\\\contexts\\\\ShipsContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShipsContext = /*#__PURE__*/createContext(null);\nexport const ShipsProvider = ({\n  children\n}) => {\n  _s();\n  const [ships, setShips] = useState([{\n    id: 1,\n    name: \"Ever Given\",\n    imoNumber: \"9811000\",\n    flag: \"Panama\",\n    status: \"Active\",\n    lastMaintenance: \"2023-12-01\",\n    nextMaintenance: \"2024-06-01\",\n    description: \"Large container ship that blocked the Suez Canal in 2021.\"\n  }, {\n    id: 2,\n    name: \"Queen Mary 2\",\n    imoNumber: \"9241061\",\n    flag: \"UK\",\n    status: \"Maintenance\",\n    lastMaintenance: \"2023-10-15\",\n    nextMaintenance: \"2024-04-15\",\n    description: \"Famous British ocean liner, flagship of the Cunard Line.\"\n  }]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchShips = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      // TODO: Implement fetch ships logic\n      // const response = await fetchShipsAPI();\n      // setShips(response.data);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const addShip = async shipData => {\n    setShips(prev => [...prev, shipData]);\n  };\n  const updateShip = async (id, shipData) => {\n    setShips(prev => prev.map(ship => ship.id === id ? {\n      ...ship,\n      ...shipData,\n      id\n    } : ship));\n  };\n  const deleteShip = async id => {\n    try {\n      setLoading(true);\n      setError(null);\n      // TODO: Implement delete ship logic\n      // await deleteShipAPI(id);\n      setShips(prev => prev.filter(ship => ship.id !== id));\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const value = {\n    ships,\n    loading,\n    error,\n    fetchShips,\n    addShip,\n    updateShip,\n    deleteShip\n  };\n  return /*#__PURE__*/_jsxDEV(ShipsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 10\n  }, this);\n};\n_s(ShipsProvider, \"jB7/nyf+Y+ztikt4/D1isJylyoA=\");\n_c = ShipsProvider;\nexport const useShips = () => {\n  _s2();\n  const context = useContext(ShipsContext);\n  if (!context) {\n    throw new Error('useShips must be used within a ShipsProvider');\n  }\n  return context;\n};\n_s2(useShips, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ShipsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","ShipsContext","ShipsProvider","children","_s","ships","setShips","id","name","imoNumber","flag","status","lastMaintenance","nextMaintenance","description","loading","setLoading","error","setError","fetchShips","err","message","addShip","shipData","prev","updateShip","map","ship","deleteShip","filter","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useShips","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/prati/OneDrive/Desktop/Assignment_ENTNT/src/contexts/ShipsContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\nconst ShipsContext = createContext(null);\r\n\r\nexport const ShipsProvider = ({ children }) => {\r\n  const [ships, setShips] = useState([\r\n    {\r\n      id: 1,\r\n      name: \"Ever Given\",\r\n      imoNumber: \"9811000\",\r\n      flag: \"Panama\",\r\n      status: \"Active\",\r\n      lastMaintenance: \"2023-12-01\",\r\n      nextMaintenance: \"2024-06-01\",\r\n      description: \"Large container ship that blocked the Suez Canal in 2021.\"\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Queen Mary 2\",\r\n      imoNumber: \"9241061\",\r\n      flag: \"UK\",\r\n      status: \"Maintenance\",\r\n      lastMaintenance: \"2023-10-15\",\r\n      nextMaintenance: \"2024-04-15\",\r\n      description: \"Famous British ocean liner, flagship of the Cunard Line.\"\r\n    }\r\n  ]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchShips = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      // TODO: Implement fetch ships logic\r\n      // const response = await fetchShipsAPI();\r\n      // setShips(response.data);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const addShip = async (shipData) => {\r\n    setShips(prev => [...prev, shipData]);\r\n  };\r\n\r\n  const updateShip = async (id, shipData) => {\r\n    setShips(prev => prev.map(ship => ship.id === id ? { ...ship, ...shipData, id } : ship));\r\n  };\r\n\r\n  const deleteShip = async (id) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      // TODO: Implement delete ship logic\r\n      // await deleteShipAPI(id);\r\n      setShips(prev => prev.filter(ship => ship.id !== id));\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    ships,\r\n    loading,\r\n    error,\r\n    fetchShips,\r\n    addShip,\r\n    updateShip,\r\n    deleteShip\r\n  };\r\n\r\n  return <ShipsContext.Provider value={value}>{children}</ShipsContext.Provider>;\r\n};\r\n\r\nexport const useShips = () => {\r\n  const context = useContext(ShipsContext);\r\n  if (!context) {\r\n    throw new Error('useShips must be used within a ShipsProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}