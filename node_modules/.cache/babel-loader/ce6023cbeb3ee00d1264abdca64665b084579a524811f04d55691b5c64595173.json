{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prati\\\\OneDrive\\\\Desktop\\\\Assignment_ENTNT\\\\src\\\\contexts\\\\ComponentsContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ComponentsContext = /*#__PURE__*/createContext(null);\nexport const ComponentsProvider = ({\n  children\n}) => {\n  _s();\n  const [components, setComponents] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchComponents = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      // TODO: Implement fetch components logic\n      // const response = await fetchComponentsAPI();\n      // setComponents(response.data);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const addComponent = async componentData => {\n    try {\n      setLoading(true);\n      setError(null);\n      // TODO: Implement add component logic\n      // const response = await addComponentAPI(componentData);\n      // setComponents(prev => [...prev, response.data]);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateComponent = async (id, componentData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      // TODO: Implement update component logic\n      // const response = await updateComponentAPI(id, componentData);\n      // setComponents(prev => prev.map(component => component.id === id ? response.data : component));\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteComponent = async id => {\n    try {\n      setLoading(true);\n      setError(null);\n      // TODO: Implement delete component logic\n      // await deleteComponentAPI(id);\n      // setComponents(prev => prev.filter(component => component.id !== id));\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const value = {\n    components,\n    loading,\n    error,\n    fetchComponents,\n    addComponent,\n    updateComponent,\n    deleteComponent\n  };\n  return /*#__PURE__*/_jsxDEV(ComponentsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 10\n  }, this);\n};\n_s(ComponentsProvider, \"//eTcOy5YAYZQ4gw4nClNKWKh2A=\");\n_c = ComponentsProvider;\nexport const useComponents = () => {\n  _s2();\n  const context = useContext(ComponentsContext);\n  if (!context) {\n    throw new Error('useComponents must be used within a ComponentsProvider');\n  }\n  return context;\n};\n_s2(useComponents, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ComponentsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","ComponentsContext","ComponentsProvider","children","_s","components","setComponents","loading","setLoading","error","setError","fetchComponents","err","message","addComponent","componentData","updateComponent","id","deleteComponent","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useComponents","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/prati/OneDrive/Desktop/Assignment_ENTNT/src/contexts/ComponentsContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\nconst ComponentsContext = createContext(null);\r\n\r\nexport const ComponentsProvider = ({ children }) => {\r\n  const [components, setComponents] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchComponents = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      // TODO: Implement fetch components logic\r\n      // const response = await fetchComponentsAPI();\r\n      // setComponents(response.data);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const addComponent = async (componentData) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      // TODO: Implement add component logic\r\n      // const response = await addComponentAPI(componentData);\r\n      // setComponents(prev => [...prev, response.data]);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateComponent = async (id, componentData) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      // TODO: Implement update component logic\r\n      // const response = await updateComponentAPI(id, componentData);\r\n      // setComponents(prev => prev.map(component => component.id === id ? response.data : component));\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const deleteComponent = async (id) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      // TODO: Implement delete component logic\r\n      // await deleteComponentAPI(id);\r\n      // setComponents(prev => prev.filter(component => component.id !== id));\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    components,\r\n    loading,\r\n    error,\r\n    fetchComponents,\r\n    addComponent,\r\n    updateComponent,\r\n    deleteComponent\r\n  };\r\n\r\n  return <ComponentsContext.Provider value={value}>{children}</ComponentsContext.Provider>;\r\n};\r\n\r\nexport const useComponents = () => {\r\n  const context = useContext(ComponentsContext);\r\n  if (!context) {\r\n    throw new Error('useComponents must be used within a ComponentsProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,iBAAiB,gBAAGL,aAAa,CAAC,IAAI,CAAC;AAE7C,OAAO,MAAMM,kBAAkB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMa,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACFH,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd;MACA;MACA;IACF,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZF,QAAQ,CAACE,GAAG,CAACC,OAAO,CAAC;IACvB,CAAC,SAAS;MACRL,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMM,YAAY,GAAG,MAAOC,aAAa,IAAK;IAC5C,IAAI;MACFP,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd;MACA;MACA;IACF,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZF,QAAQ,CAACE,GAAG,CAACC,OAAO,CAAC;IACvB,CAAC,SAAS;MACRL,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMQ,eAAe,GAAG,MAAAA,CAAOC,EAAE,EAAEF,aAAa,KAAK;IACnD,IAAI;MACFP,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd;MACA;MACA;IACF,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZF,QAAQ,CAACE,GAAG,CAACC,OAAO,CAAC;IACvB,CAAC,SAAS;MACRL,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMU,eAAe,GAAG,MAAOD,EAAE,IAAK;IACpC,IAAI;MACFT,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd;MACA;MACA;IACF,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZF,QAAQ,CAACE,GAAG,CAACC,OAAO,CAAC;IACvB,CAAC,SAAS;MACRL,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMW,KAAK,GAAG;IACZd,UAAU;IACVE,OAAO;IACPE,KAAK;IACLE,eAAe;IACfG,YAAY;IACZE,eAAe;IACfE;EACF,CAAC;EAED,oBAAOlB,OAAA,CAACC,iBAAiB,CAACmB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAhB,QAAA,EAAEA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAA6B,CAAC;AAC1F,CAAC;AAACpB,EAAA,CAxEWF,kBAAkB;AAAAuB,EAAA,GAAlBvB,kBAAkB;AA0E/B,OAAO,MAAMwB,aAAa,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACjC,MAAMC,OAAO,GAAG/B,UAAU,CAACI,iBAAiB,CAAC;EAC7C,IAAI,CAAC2B,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,wDAAwD,CAAC;EAC3E;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,aAAa;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}